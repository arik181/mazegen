The purpose of this document is to set out the guidelines and planning for the project, and to set out the general direction in which I intend to proceed with its implementation.

Analysis: 

Nouns of note:

	game
	piece
	maze
	data structure

Verbs of note:

	movement
	back up
	start over
	win
	

My questions are as follows: 

	What is the core of the game, if it is as general purpose as possible?

		Clearly, the maze is the core of the game. All other elements are secondary.

	How is the maze created?

		The maze will take responsibility for creating itself (populating its own data structure from a compile-time defined struct).

Objects and responsibilities are as follows:

	Maze -
	
		Class: Cell

			A Cell is the area contained within a single node. Various state markers may appear within the cell to indicate status to the user.

		Class: Node inherits from Cell

			A Node is a Cell which is aware of its neighbors, its parents and its children.
			
		Class: Maze Inherits from Node

			The maze is a special case of Node. It has no parent, and is aware of all children. Maze is the root node of the tree.

		Maze will move the piece. 
		Maze will keep a pointer to the current player position, the Start and Finish positions.
		Maze will report to History the reverse of each move the player makes.
		Each node will draw itself.

	History -

		Class: StackNode
		Class: Stack Inherits from StackNode
		Class: History Inherits from Stack
		
		History StackNodes will inherit from Node. They will contain a reference to one Node, as well as a pointer for stack operation.
		History may contain multiple references to the same Node.

Maze Layout:

	The maze will be self-generated, according to the following criteria:

	We will assume that the Maze is a square.

	A Node will contain the following elements:
		
		Four directional node pointers: N, E, S, and W. NULL is a wall. If these are all NULL, we know that we are at the top.
		One pointer for the node in the level above the current level.
		Four node pointers, creatable on command, effectively dividing the node into quadrants. 
			If these nodes are NULL, we know that the current node is at the top of the heirarchy, i.e.: it is the Maze.
		One pointer to a node that "knows" Finish. This will never be NULL. If the node is Finish, it will point to itself, for comparison.
		One pointer to a node that "knows" Start. This will never be NULL. If the node is Start, it will point to itself, for comparison.
		A single one-byte state which tracks whether the current node is the finish or start location. If the object is both, we are at the top.
			The state also tracks whether the "player" is currently in the current node.
		A "Cell", which will consist of at most four "Walls".
		
		
	The generation will take place as follows: 
	
		For each layer (factor) of the heirarchy, the proper number of node objects will be generated. 

		One node will be Start, one will be Finish. Start will be on the far West wall, Finish will be on the far East wall at random.
		A node will tell its child whether or not it is Start or Finish, selecting an East or West target at random as appropriate.
		One and only one node at each layer will be Start; One and only one node at each layer will be Finish.

		Start and Finish must be connected at each layer. The point of connection will be determined by the layer above.

Iteration of Implementation:

	We will begin by creating a program which creates a maze of one node. The node will be both start and finish.

	We will then create a maze of four nodes, whose parent is the Maze.
	
	We will then create a maze of sixteen nodes, whose parent is layer two.

	All of these nodes will be created using the same process. The command for generating a Maze will be defined as follows:

		maze::create(int order);

		Order will be the order of magnitude of the maze, or its underlying number of layers.

	History will be implemented as time allows.

