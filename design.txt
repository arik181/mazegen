In program #1 I thought it might be fun to develop a text based game. After teaching computer graphics last term, I found that many students were interested with the notion of creating game programs. Although we don’t have time to implement a full computer graphics program – we will develop a short program that will allow a piece to move from start through some maze that is developed as part of your data structure. As this should be an object oriented problem, think about what a game piece is, what movements it should be allowed to do, how do you backup or start over, and how do you define winning? Is there a point system? Come up with a set of questions and design the solution for the game of your choice. Then develop a set of classes that work together to implement that solution. Think of it as just a beginning. Your goal will be to make this as general purpose as possible. 

With this assignment, we want to alter our concept of how trees can be used and implement a tree similar to R-Trees. These are typically used for spatial data where information is stored by “area”. They are useful for computer-assisted design, geographical data and VLSI design. The idea is that we want to create the tree, search and delete data by its domain or spatial area. For example, a game program might use an R-Tree to find out where a piece can move to based on its current location. Although it would be nice to implement an R-Tree, that will be too much for a 2 week project. So, we will implement a simplified version as described below.
For This Program

For our tree (KF-Tree), let’s make the following rules:

The data in each node is the current position of your game piece.

   1. At each node there are at most 4 children representing 4 quadrants from the current position and a description of that location. (all of them can be NULL if the game piece has made its way into a back alley and has no way out!)
   2. Each child node contains its position along with the at most 4 directions or quadrants that the game piece can move to.


Analysis: 

Nouns of note:

	game
	piece
	maze
	data structure

Verbs of note:

	movement
	back up
	start over
	win
	

My questions are as follows: 

	What is the core of the game, if it is as general purpose as possible?

		Clearly, the maze is the core of the game. All other elements are secondary.

	How is the maze created?

		The maze will take responsibility for creating itself (populating its own data structure from a compile-time defined struct).

	Should the maze be dynamic, or static?

		There will be a single maze 'layout', contained within a struct. The maze will be static, in order to reduce effort. (Proof of Concept)

Objects and responsibilities are as follows:

	Maze -
	
		Class: Cell

			A Cell is the area contained within a single node. Various markers may appear within the cell to indicate status to the user.

		Class: Node inherits from Cell
		Class: QTree Inherits from QNode
		Class: Maze Inherits from QTree

		Maze will move the piece. 
		Maze will keep a pointer to the current player position, the Start and Finish positions.
		Maze will report to History the reverse of each move the player makes.
		Each node will draw itself.

	History -

		Class: StackNode
		Class: Stack Inherits from StackNode
		Class: History Inherits from Stack
		
		History StackNodes will inherit from QNode. They will contain a reference to one QNode, as well as a pointer for stack operation.
		History may contain multiple references to the same QNode.

Maze Layout:

	The maze will be self-generated, according to the following criteria:

	We will assume that the Maze is a square.

	A Node will contain the following elements:
		
		Four directional node pointers: N, E, S, and W. NULL is a wall. If these are all NULL, we know that we are at the top.
		One pointer for the node in the level above the current level.
		Four node pointers, creatable on command, effectively dividing the node into quadrants. 
			If these nodes are NULL, we know that the current node is at the top of the heirarchy, i.e.: it is the Maze.
		One pointer to a node that "knows" Finish. This will never be NULL. If the node is Finish, it will point to itself, for comparison.
		One pointer to a node that "knows" Start. This will never be NULL. If the node is Start, it will point to itself, for comparison.
		A single one-byte state which tracks whether the current node is the finish or start location. If the object is both, we are at the top.
			The state also tracks whether the "player" is currently in the current node.
		A "Cell", which will consist of at most four "Walls".
		
		
	The generation will take place as follows: 
	
		For each layer (factor) of the heirarchy, the proper number of node objects will be generated. 

		One node will be Start, one will be Finish. Start will be on the far West wall, Finish will be on the far East wall at random.
		A node will tell its child whether or not it is Start or Finish, selecting an East or West target at random as appropriate.
		One and only one node at each layer will be Start; One and only one node at each layer will be Finish.

		Start and Finish must be connected at each layer. The point of connection will be determined by the layer above.

Iteration of Implementation:

	We will begin by creating a program which creates a maze of one node. The node will be both start and finish.

	We will then create a maze of four nodes, whose parent is the Maze.
	
	We will then create a maze of sixteen nodes, whose parent is layer two.

	All of these nodes will be created using the same process. The command for generating a Maze will be defined as follows:

		maze::create(int order);

		Order will be the order of magnitude of the maze, or its underlying number of layers.

	History will be implemented as time allows.

